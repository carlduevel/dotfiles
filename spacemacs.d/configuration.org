#+TITLE: Emacs configuration
#+AUTHOR: Carl DÃ¼vel
#+EMAIL: c.a.duevel@gmail.com 
* Editing
** Escape mode
#+BEGIN_SRC emacs-lisp
  (setq-default evil-escape-delay 0.2)
  (setq-default evil-escape-key-sequence "jk")
#+END_SRC
** Save Buffer on focus out
Give Emacs the nice IDEA feature of "auto-save on focus lost".
Pulled from [[https://emacsredux.com/blog/2014/03/22/a-peek-at-emacs-24-dot-4-focus-hooks/][here.]]
#+BEGIN_SRC emacs-lisp
(add-hook 'focus-out-hook (lambda () (save-some-buffers t)))
#+END_SRC
** Automatic Line Breaks
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'auto-fill-mode)
#+END_SRC
** Auto-Save in =/tmp=

Store backups and auto-saved files in =TEMPORARY-FILE-DIRECTORY= (which
defaults to /tmp on Unix), instead of in the same directory as the
file.

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+END_SRC
** Always follow symlinks
When opening a file, always follow symlinks.
#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks t)
#+END_SRC
** Format whole file
#+BEGIN_SRC emacs-lisp
  (defun indent-buffer ()
    (interactive)
    (save-excursion
      (indent-region (point-min) (point-max) nil)))
  (spacemacs/set-leader-keys "or" 'indent-buffer)
#+END_SRC 
** Do not add a newline at the end of the file on save
#+BEGIN_SRC emacs-lisp
  (setq require-final-newline nil)
#+END_SRC
** f and t should work across lines
#+begin_src emacs-lisp 
  (setq evil-cross-lines t)
#+end_src
** Handling long lines more gracefully
All the tips from [[https://200ok.ch/posts/2020-09-29_comprehensive_guide_on_handling_long_lines_in_emacs.html][Alain's great post:]] 
#+BEGIN_SRC emacs-lisp
  (setq bidi-paragraph-direction 'left-to-right)
  (if (version<= "27.1" emacs-version)
      (setq bidi-inhibit-bpa t))
  (if (version<= "27.1" emacs-version)
      (global-so-long-mode 1))
#+END_SRC


* Org mode
** UI
Always indent for better overview.
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC
 Hide empty lines between sub-headers in collapsed view.
#+BEGIN_SRC emacs-lisp
(setq org-cycle-separator-lines 0)
#+END_SRC
Log state changes of todos into the LOGBOOK drawer.
#+BEGIN_SRC emacs-lisp
(setq org-log-into-drawer t)
#+END_SRC
Hide leading stars.
#+BEGIN_SRC emacs-lisp
(setq org-hide-leading-stars t)
#+END_SRC
** GTD setup
#+BEGIN_SRC emacs-lisp
  (require 'org)
  (setq org-dir "~/Dropbox/org/")
  (setq gtd-dir (concat org-dir "gtd/"))
  (setq inbox-file (concat gtd-dir "inbox.org"))
  (setq gtd-file (concat gtd-dir "gtd.org"))
  (setq sm-file (concat gtd-dir "someday_maybe.org"))
  (setq org-agenda-files (list
                          inbox-file
                          gtd-file))
  (setq org-agenda-skip-scheduled-if-done t)
  (setq org-agenda-skip-deadline-prewarning-if-scheduled t)
  (setq org-agenda-window-setup 'current-window) 


  (setq org-todo-keywords
        '((sequence "TODO(t!)" "|" "DONE(d!)")
          (sequence "PROJECT(p!)" "AGENDA(a!)" "|" "MINUTES(m!)")
          (sequence "WAITING(w!)" "|" "PROGRESS(p!)")))


  (setq org-refile-targets '((org-agenda-files :maxlevel . 3)))
  (setq org-refile-use-outline-path 'file)

  (setq org-agenda-custom-commands
        '(("h" "@home" tags-todo "@home")
          ("c" "@computer" tags-todo "@computer")
          ("H" "+hasi" tags-todo "+hasi")
          ("p" "@phone" tags-todo "@phone")
          ("b" "@BO" tags-todo "@BO")))
#+END_SRC
Org Capture Templates are explained [[http://orgmode.org/manual/Capture-templates.html][here]] and Org Template expansion
[[http://orgmode.org/manual/Template-expansion.html#Template-expansion][here.]] There is also a  need to load org-protocol to get the
[[https://github.com/sprig/org-capture-extension][org-capture-extension]] going.

#+BEGIN_SRC emacs-lisp
    (setq org-default-notes-file  inbox-file)
    (require 'org-protocol)


    (setq snippets-file (concat org-dir "snippets.org"))
    (setq quotes-file (concat org-dir "quotes.org"))

    (setq org-capture-templates '(("t" "Todo" entry
                                   (file+headline  gtd-file "Misc")"* TODO %i%?")
                                  ("i" "Inbox" entry
                                   (file+headline  inbox-file "To process:")"* %i%?")
                                  ("m" "SomedayMaybe" entry
                                   (file+headline  sm-file "To process:")"* %i%?")
                                  ("s" "Code Snippet" entry (file+headline snippets-file "Snippets")
                                   ;; Prompt for tag and language
                                   "* %?\t%^g\n#+BEGIN_SRC %^{language}\n%i\n#+END_SRC")
                                  ("Q" "Quote" entry (file+headline quotes-file "To order")
                                   ;; Prompt for tag and language
                                   "* %?\t%^g\n#+BEGIN_QUOTE\n%i\n#+END_QUOTE\n%^{source}")
                                  ("q" "Protocol" entry
                                   (file+headline inbox-file "Quotes")
                                   "* %? [[%:link][%:description]]\nCaptured on: %U\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n")
                                  ("L" "Protocol Link" entry
                                   (file+headline inbox-file "Links")
                                   "* %? [[%:link][%:description]] \nCaptured on: %U")))

#+END_SRC
*** Projects
#+BEGIN_SRC emacs-lisp
  (setq org-stuck-projects '("/PROJECT" ("TODO" "NEXT" "WAITING") nil nil))
#+END_SRC
** Keybindings
I set TODOs to done all the time and archive them afterwards. This should be one
shortcut.
#+BEGIN_SRC emacs-lisp
  (defun done-archive ()
    (interactive)
    (org-todo "DONE")
    (org-archive-subtree-default))
  (spacemacs/set-leader-keys "od" 'done-archive)
#+END_SRC 
** Org extensions
*** Org Journal
#+BEGIN_SRC emacs-lisp
(setq org-journal-dir "~/Dropbox/org/journal/")
#+END_SRC
*** Org Roam
#+BEGIN_SRC emacs-lisp
  (setq org-roam-directory (concat (getenv "HOME") "/Dropbox/org-roam"))
  (require 'org-roam-protocol)
  (setq org-roam-ref-capture-templates
        '(("r" "ref" plain (function org-roam-capture--get-point)
           "%?"
           :file-name "websites/${slug}"
           :head "#+TITLE: ${title}
      ,#+ROAM_KEY: ${ref}
      - source :: ${ref}"
           :unnarrowed t)))
#+END_SRC


* Neotree
In order to have nice icons for neotree[[https://github.com/domtronn/all-the-icons.el][ all-the-icons package]]  has to be installed.
#+BEGIN_SRC emacs-lisp 
(setq neo-theme 'icons)
#+END_SRC
Add source control integration.
#+BEGIN_SRC emacs-lisp
  (setq-default dotspacemacs-configuration-layers '(
    (treemacs :variables treemacs-use-git-mode 'deferred)))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (setq treemacs-project-follow-cleanup t)
#+END_SRC

* Programming
** Clojure
Get rid of those reevaluation warnings for refactorings.
#+BEGIN_SRC emacs-lisp
  (setq cljr-warn-on-eval nil)
#+END_SRC
Also do not ask to save the file if evaluating it.
#+BEGIN_SRC emacs-lisp
  (setq cider-save-file-on-load t)
#+END_SRC
Always show test results:
#+BEGIN_SRC emacs-lisp
  (setq cider-test-show-report-on-success t)
#+END_SRC
[[https://practicalli.github.io/spacemacs/improving-code/formatting/][Recommendated formatting]]:
#+BEGIN_SRC emacs-lisp
  (setq clojure-indent-style 'align-arguments
        clojure-align-forms-automatically t)
#+END_SRC
Custom clj-kondo (with global config).
#+BEGIN_SRC emacs-lisp
  (setq  flycheck-clj-kondo-clj-executable
         (concat (getenv "HOME") "/.spacemacs.d/clj-kondo-custom" ))

#+END_SRC
#+BEGIN_SRC emacs-lisp
    (defun cider-inspect-last-sexp-with-popup ()
      (interactive)
      (cider-inspect-last-sexp)
      (switch-to-buffer "*cider-inspect*")
      ;; (pop-to-buffer  "*cider-inspect*")
      )
  (spacemacs/set-leader-keys-for-major-mode 'clojure-mode  "oi" 'cider-inspect-last-sexp-with-popup)
#+END_SRC
** Git
Always highlight differences in diff.
#+BEGIN_SRC emacs-lisp
  (setq magit-diff-refine-hunk 'all)
#+END_SRC
** Projectile
Create test files if they do not exist on switching the buffer 
#+BEGIN_SRC emacs-lisp
  (setq projectile-create-missing-test-files t)
#+END_SRC
** Autocompletion
#+BEGIN_SRC emacs-lisp
  (setq 
   auto-completion-enable-help-tooltip t
   auto-completion-enable-snippets-in-popup t
   auto-completion-enable-sort-by-usage t)
#+END_SRC
